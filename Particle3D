import sys
import numpy as np
class Particle3D(object):

    # Initialise a Particle3D instance
    def __init__(self, pos, vel, mass, label):
        self.position = pos
        self.velocity = vel
        self.mass = mass
        self.label = label

    # Formatted output as String
    def __str__(self):
        return "label = " + str(self.label) + "x = " + str(self.position[0]) + "y = " + str(self.position[1]) + "z = " + str(self.position[2])

    # Time integration methods. First-order velocity update
    def leapVelocity(self, dt, force):
        self.velocity = self.velocity + dt*(force/self.mass)

    # Second-order position update
    def leapPos(self, dt, force):
        self.position = self.position + dt*self.velocity + 0.5*dt**2*force/self.mass
    
    #Calculates Kinetic Energy of Particle
    def KinEnergy(self):
        v = np.linalg.norm(self.velocity)
        KinEnergy = 0.5*self.mass*(v**2)
        return KinEnergy


    # Static Method returning relative vector separation of two particles
    @staticmethod
    def separation(p1,p2, boxLen):
        separation = np.array([0.0,0.0,0.0])
        for i in range(3):
            pos1 = p1.position[i]
            distance = p1.position[i] - p2.position[i]
            if distance>(boxLen/2):
                pos1 = (pos1 % (boxLen))-boxLen
                separation[i] = pos1-p2.position[i]
            elif distance<-(boxLen/2):
                pos1 = (pos1 % (boxLen)) + (boxLen)
                separation[i] = pos1-p2.position[i]
            else:
                separation[i] = distance
        return separation
    
    # Static Method that calculates the Mean Squared Displacement of all the particles in the box
    @staticmethod
    def MSD_Calculator(particles, SDContain):

        dR_Holder = []
        dR_Temp = []
        MSD_List = []
        Reciprocal_N = 1./(len(particles))

        RHolder = np.array(SDContain)
        for t in range (len(RHolder)):
            for i in range (len(particles)):
                dR =abs(RHolder[t][i] - RHolder[0][i])
                dR_Temp.append(dR)
            dR_Holder.append(dR_Temp)
            dR_Temp = []

        a = np.array(dR_Holder)
        
        Displacement_Sum = a.sum(axis=1)
        Displacement_Sum.astype(float)

        MSD = Reciprocal_N * np.array(Displacement_Sum)
        
    @staticmethod
    def PotEnergy(r):
        PotEnergy = (2/(r**12))-(2/(r**6))
        return PotEnergy
